#version: "3.8"
#
#services:
#  # Customer Service Application
#  service-customer:
#    build:
#      context: ./services/service-customer
#      dockerfile: Dockerfile
#      no_cache: true
#    container_name: service-customer
#    ports:
#      - "8081:8081"
#    environment:
#      - MYSQL_HOST=customer-db
#      - MYSQL_PORT=3306
#      - MYSQL_DATABASE=service_customer
#      - MYSQL_USER=customer_user
#      - MYSQL_PASSWORD=customer_pass
#    networks:
#      - customer-network
#    depends_on:
#      - customer-db
#    restart: unless-stopped
#
#  # Customer Database
#  customer-db:
#    image: mysql:8.0
#    container_name: customer-db
#    environment:
#      - MYSQL_DATABASE=service_customer
#      - MYSQL_USER=customer_user
#      - MYSQL_PASSWORD=customer_pass
#      - MYSQL_ROOT_PASSWORD=root_password
#    volumes:
#      - customer-db-data:/var/lib/mysql
#      - ./services/service-customer/init-scripts:/docker-entrypoint-initdb.d
#    networks:
#      - customer-network
#    restart: unless-stopped
#
#  service-product:
#    build:
#      context: ./services/service-product
#      dockerfile: Dockerfile
#      no_cache: true
#    container_name: service-product
#    ports:
#      - "8083:8083"
#    environment:
#      - MYSQL_HOST=product-db
#      - MYSQL_PORT=3306
#      - MYSQL_DATABASE=service_product
#      - MYSQL_USERNAME=product_user
#      - MYSQL_PASSWORD=product_pass
#    depends_on:
#      - product-db
#    networks:
#      - product-network
#    restart: unless-stopped
#
#  product-db:
#    image: mysql:8.0
#    container_name: product-db
#    environment:
#      - MYSQL_DATABASE=service_product
#      - MYSQL_USER=product_user
#      - MYSQL_PASSWORD=product_pass
#      - MYSQL_ROOT_PASSWORD=rootpassword
#    volumes:
#      - product-db-data:/var/lib/mysql
#      - ./services/service-product/init-scripts:/docker-entrypoint-initdb.d
#    networks:
#      - product-network
#    restart: unless-stopped
#  service-order:
#    build:
#      context: ./services/service-order
#      dockerfile: Dockerfile
#      no_cache: true
#    container_name: service-order
#    ports:
#      - "8082:8082"
#    environment:
#      - MYSQL_HOST=order-db
#      - MYSQL_PORT=3306
#      - MYSQL_DATABASE=service_order
#      - MYSQL_USERNAME=order_user
#      - MYSQL_PASSWORD=order_pass
#    depends_on:
#      - order-db
#    networks:
#      - order-network
#    restart: unless-stopped
#  order-db:
#    image: mysql:8.0
#    container_name: order-db
#    environment:
#      - MYSQL_DATABASE=service_order
#      - MYSQL_USER=order_user
#      - MYSQL_PASSWORD=order_pass
#      - MYSQL_ROOT_PASSWORD=rootpassword
#    volumes:
#      - order-db-data:/var/lib/mysql
#      - ./services/service-order/init-scripts:/docker-entrypoint-initdb.d
#    networks:
#      - order-network
#    restart: unless-stopped
#
#volumes:
#  customer-db-data:
#  product-db-data:
#  order-db-data:
#
#networks:
#  customer-network:
#    driver: bridge
#  product-network:
#    driver: bridge
#  order-network:
#    driver: bridge


services:
  kafka:
    image: apache/kafka-native
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-ui:
    image: kafbat/kafka-ui:main
    ports:
      - 9999:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      - kafka