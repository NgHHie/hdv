version: "3.8"
services:
  # Discovery Server (Eureka)
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
      no_cache: true
    container_name: discovery-server
    ports:
      - "${DISCOVERY_SERVER_PORT}:${DISCOVERY_SERVER_PORT}"
    environment:
      - SERVER_PORT=${DISCOVERY_SERVER_PORT}
      - SPRING_APPLICATION_NAME=discovery-server
    networks:
      - microservices-network

  # Security Service Database
  security-db:
    image: mysql:8.0
    container_name: security-db
    environment:
      - MYSQL_DATABASE=${SECURITY_DB_NAME}
      - MYSQL_USER=${SECURITY_DB_USER}
      - MYSQL_PASSWORD=${SECURITY_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${SECURITY_DB_PASSWORD}
    volumes:
      - security-db-data:/var/lib/mysql
      - ./security-service/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-network

  # Security Service
  security-service:
    build:
      context: ./security-service
      dockerfile: Dockerfile
      no_cache: true
    container_name: security-service
    environment:
      - SERVER_PORT=${SECURITY_SERVICE_PORT}
      - SPRING_APPLICATION_NAME=${SECURITY_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - MYSQL_HOST=${SECURITY_DB_HOST}
      - MYSQL_PORT=${SECURITY_DB_PORT}
      - MYSQL_DATABASE=${SECURITY_DATABASE}
      - MYSQL_USERNAME=${SECURITY_DB_USER}
      - MYSQL_PASSWORD=${SECURITY_DB_PASSWORD}
      - APP_JWT_SECRET=${JWT_SECRET}
      - APP_JWT_EXPIRATION_MS=${JWT_EXPIRATION_MS}
    depends_on:
      - discovery-server
      - security-db
    networks:
      - microservices-network

  # Customer Service Database
  customer-db:
    image: mysql:8.0
    container_name: customer-db
    environment:
      - MYSQL_DATABASE=${CUSTOMER_DB_NAME}
      - MYSQL_USER=${CUSTOMER_DB_USER}
      - MYSQL_PASSWORD=${CUSTOMER_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${CUSTOMER_DB_PASSWORD}
    volumes:
      - customer-db-data:/var/lib/mysql
      - ./services/service-customer/init-scripts:/docker-entrypoint-initdb.d

    networks:
      - microservices-network
  # Customer Service
  service-customer:
    build:
      context: ./services/service-customer
      dockerfile: Dockerfile
    container_name: service-customer
    environment:
      - SERVER_PORT=${CUSTOMER_SERVICE_PORT}
      - SPRING_APPLICATION_NAME=${CUSTOMER_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:${DISCOVERY_SERVER_PORT}/eureka/
      - MYSQL_HOST=${CUSTOMER_DB_HOST}
      - MYSQL_PORT=${CUSTOMER_DB_PORT}
      - MYSQL_DATABASE=${CUSTOMER_DATABASE}
      - MYSQL_USERNAME=${CUSTOMER_DB_USER}
      - MYSQL_PASSWORD=${CUSTOMER_DB_PASSWORD}
    depends_on:
      - discovery-server
      - customer-db
    networks:
      - microservices-network

  # Product Service Database
  product-db:
    image: mysql:8.0
    container_name: product-db
    environment:
      - MYSQL_DATABASE=${PRODUCT_DB_NAME}
      - MYSQL_USER=${PRODUCT_DB_USER}
      - MYSQL_PASSWORD=${PRODUCT_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${PRODUCT_DB_PASSWORD}
      - MYSQL_HOST=${PRODUCT_DB_HOST}
    volumes:
      - product-db-data:/var/lib/mysql
      - ./services/service-product/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-network

  # Product Service
  service-product:
    build:
      context: ./services/service-product
      dockerfile: Dockerfile
    container_name: service-product
    environment:
      - SERVER_PORT=${PRODUCT_SERVICE_PORT}
      - SPRING_APPLICATION_NAME=${PRODUCT_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:${DISCOVERY_SERVER_PORT}/eureka/
      - MYSQL_HOST=${PRODUCT_DB_HOST}
      - MYSQL_PORT=${PRODUCT_DB_PORT}
      - MYSQL_DATABASE=${PRODUCT_DATABASE}
      - MYSQL_USERNAME=${PRODUCT_DB_USER}
      - MYSQL_PASSWORD=${PRODUCT_DB_PASSWORD}
    depends_on:
      - discovery-server
      - product-db
    networks:
      - microservices-network

  # Notification Service Database
  notification-db:
    image: mysql:8.0
    container_name: notification-db
    environment:
      - MYSQL_DATABASE=${NOTIFICATION_DB_NAME}
      - MYSQL_USER=${NOTIFICATION_DB_USER}
      - MYSQL_PASSWORD=${NOTIFICATION_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${NOTIFICATION_DB_PASSWORD}
    volumes:
      - notification-db-data:/var/lib/mysql
      - ./services/service-notification/init-script:/docker-entrypoint-initdb.d
    networks:
      - microservices-network

  # Notification Service
  service-notification:
    build:
      context: ./services/service-notification
      dockerfile: Dockerfile
    container_name: service-notification
    environment:
      - SERVER_PORT=${NOTIFICATION_SERVICE_PORT}
      - SPRING_APPLICATION_NAME=${NOTIFICATION_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:${DISCOVERY_SERVER_PORT}/eureka/
      - MYSQL_HOST=${NOTIFICATION_DB_HOST}
      - MYSQL_PORT=${NOTIFICATION_DB_PORT}
      - MYSQL_DATABASE=${NOTIFICATION_DATABASE}
      - MYSQL_USERNAME=${NOTIFICATION_DB_USER}
      - MYSQL_PASSWORD=${NOTIFICATION_DB_PASSWORD}
      - SPRING_MAIL_HOST=${MAIL_HOST}
      - SPRING_MAIL_PORT=${MAIL_PORT}
      - SPRING_MAIL_USERNAME=${MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${MAIL_PASSWORD}
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true
      - SERVICE_CUSTOMER_URL=http://service-customer:${CUSTOMER_SERVICE_PORT}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:${KAFKA_PORT}
      - SPRING_KAFKA_CONSUMER_GROUP_ID=notification-group
    depends_on:
      - discovery-server
      - notification-db
      - kafka
      - service-customer
    networks:
      - microservices-network

  # Technician Service Database
  technician-db:
    image: mysql:8.0
    container_name: technician-db
    environment:
      - MYSQL_DATABASE=${TECHNICIAN_DB_NAME}
      - MYSQL_USER=${TECHNICIAN_DB_USER}
      - MYSQL_PASSWORD=${TECHNICIAN_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${TECHNICIAN_DB_PASSWORD}
    volumes:
      - technician-db-data:/var/lib/mysql
      - ./services/service-technician/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-network

  # Technician Service
  service-technician:
    build:
      context: ./services/service-technician
      dockerfile: Dockerfile
    container_name: service-technician
    environment:
      - SERVER_PORT=${TECHNICIAN_SERVICE_PORT}
      - SPRING_APPLICATION_NAME=${TECHNICIAN_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:${DISCOVERY_SERVER_PORT}/eureka/
      - MYSQL_HOST=${TECHNICIAN_DB_HOST}
      - MYSQL_PORT=${TECHNICIAN_DB_PORT}
      - MYSQL_DATABASE=${TECHNICIAN_DATABASE}
      - MYSQL_USERNAME=${TECHNICIAN_DB_USER}
      - MYSQL_PASSWORD=${TECHNICIAN_DB_PASSWORD}
    depends_on:
      - discovery-server
      - technician-db
    networks:
      - microservices-network

  # Gateway Service
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
      no_cache: true
    container_name: gateway-service
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    environment:
      - SERVER_PORT=${GATEWAY_PORT}
      - SPRING_APPLICATION_NAME=${GATEWAY_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:${DISCOVERY_SERVER_PORT}/eureka/
      - APP_JWT_SECRET=${JWT_SECRET}
    depends_on:
      - discovery-server
    networks:
      - microservices-network

  # Survey Service Database
  survey-db:
    image: mysql:8.0
    container_name: survey-db
    environment:
      - MYSQL_DATABASE=${SURVEY_DB_NAME}
      - MYSQL_USER=${SURVEY_DB_USER}
      - MYSQL_PASSWORD=${SURVEY_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${SURVEY_DB_PASSWORD}
    volumes:
      - survey-db-data:/var/lib/mysql
      - ./services/service-survey/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-network

  # Survey Service
  service-survey:
    build:
      context: ./services/service-survey
      dockerfile: Dockerfile
      no_cache: true
    container_name: service-survey
    environment:
      - SERVER_PORT=${SURVEY_SERVICE_PORT}
      - SPRING_APPLICATION_NAME=${SURVEY_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:${DISCOVERY_SERVER_PORT}/eureka/
      - MYSQL_HOST=${SURVEY_DB_HOST}
      - MYSQL_PORT=${SURVEY_DB_PORT}
      - MYSQL_DATABASE=${SURVEY_DATABASE}
      - MYSQL_USERNAME=${SURVEY_DB_USER}
      - MYSQL_PASSWORD=${SURVEY_DB_PASSWORD}
    depends_on:
      - discovery-server
      - survey-db
    networks:
      - microservices-network

  # Warranty Service
  service-warranty:
    build:
      context: ./services/service-warranty
      dockerfile: Dockerfile
      no_cache: true
    container_name: service-warranty
    environment:
      - SERVER_PORT=${WARRANTY_SERVICE_PORT}
      - SPRING_APPLICATION_NAME=${WARRANTY_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:${DISCOVERY_SERVER_PORT}/eureka/
      - SERVICE_PRODUCT_URL=http://service-product
      - SERVICE_REPAIR_URL=http://service-repair
      - SERVICE_NOTIFICATION_URL=http://service-notification
      - SERVICE_CUSTOMER_URL=http://service-customer
      - SERVICE_CONDITION_URL=http://service-condition
      - SERVICE_TECHNICIAN_URL=http://service-technician
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:${KAFKA_PORT}
    depends_on:
      - discovery-server
      - kafka
      - service-product
      - service-customer
      - service-condition
      - service-technician
    networks:
      - microservices-network
  # Condition Service Database
  condition-db:
    image: mysql:8.0
    container_name: condition-db
    environment:
      - MYSQL_DATABASE=${CONDITION_DB_NAME}
      - MYSQL_USER=${CONDITION_DB_USER}
      - MYSQL_PASSWORD=${CONDITION_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${CONDITION_DB_PASSWORD}
    volumes:
      - condition-db-data:/var/lib/mysql
      - ./services/service-condition/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-network

  # Condition Service
  service-condition:
    build:
      context: ./services/service-condition
      dockerfile: Dockerfile
      no_cache: true
    container_name: service-condition
    environment:
      - SERVER_PORT=${CONDITION_SERVICE_PORT}
      - SPRING_APPLICATION_NAME=${CONDITION_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:${DISCOVERY_SERVER_PORT}/eureka/
      - MYSQL_HOST=${CONDITION_DB_HOST}
      - MYSQL_PORT=${CONDITION_DB_PORT}
      - MYSQL_DATABASE=${CONDITION_DATABASE}
      - MYSQL_USERNAME=${CONDITION_DB_USER}
      - MYSQL_PASSWORD=${CONDITION_DB_PASSWORD}
    depends_on:
      - discovery-server
      - condition-db
    networks:
      - microservices-network

  # Repair Service Database
  repair-db:
    image: mysql:8.0
    container_name: repair-db
    environment:
      - MYSQL_DATABASE=${REPAIR_DB_NAME}
      - MYSQL_USER=${REPAIR_DB_USER}
      - MYSQL_PASSWORD=${REPAIR_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${REPAIR_DB_PASSWORD}
    volumes:
      - repair-db-data:/var/lib/mysql
    networks:
      - microservices-network

  # Repair Service
  service-repair:
    build:
      context: ./services/services-repair
      dockerfile: Dockerfile
      no_cache: true
    container_name: service-repair
    environment:
      - SERVER_PORT=${REPAIR_SERVICE_PORT}
      - SPRING_APPLICATION_NAME=${REPAIR_SERVICE_NAME}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:${DISCOVERY_SERVER_PORT}/eureka/
      - MYSQL_HOST=${REPAIR_DB_HOST}
      - MYSQL_PORT=${REPAIR_DB_PORT}
      - MYSQL_DATABASE=${REPAIR_DATABASE}
      - MYSQL_USERNAME=${REPAIR_DB_USER}
      - MYSQL_PASSWORD=${REPAIR_DB_PASSWORD}
      - SERVICE_NOTIFICATION_URL=http://service-notification
      - SERVICE_WARRANTY_URL=http://service-warranty
      - SERVICE_PRODUCT_URL=http://service-product
    depends_on:
      - discovery-server
      - repair-db
      - service-notification
      - service-warranty
      - service-product
    networks:
      - microservices-network
  kafka:
    image: apache/kafka-native
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
volumes:
  security-db-data:
  customer-db-data:
  product-db-data:
  notification-db-data:
  technician-db-data:
  condition-db-data:
  survey-db-data:
  repair-db-data:

networks:
  microservices-network:
    driver: bridge
